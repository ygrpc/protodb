// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protodb.proto

package protodb

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProtoDbSrvName is the fully-qualified name of the ProtoDbSrv service.
	ProtoDbSrvName = "protodb.ProtoDbSrv"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProtoDbSrvCrudProcedure is the fully-qualified name of the ProtoDbSrv's Crud RPC.
	ProtoDbSrvCrudProcedure = "/protodb.ProtoDbSrv/Crud"
	// ProtoDbSrvTableSelectProcedure is the fully-qualified name of the ProtoDbSrv's TableSelect RPC.
	ProtoDbSrvTableSelectProcedure = "/protodb.ProtoDbSrv/TableSelect"
	// ProtoDbSrvQueryProcedure is the fully-qualified name of the ProtoDbSrv's Query RPC.
	ProtoDbSrvQueryProcedure = "/protodb.ProtoDbSrv/Query"
)

// ProtoDbSrvClient is a client for the protodb.ProtoDbSrv service.
type ProtoDbSrvClient interface {
	// crud
	Crud(context.Context, *connect.Request[CrudReq]) (*connect.Response[CrudResp], error)
	// table select
	TableSelect(context.Context, *connect.Request[TableSelectReq]) (*connect.ServerStreamForClient[TableSelectResp], error)
	// query
	Query(context.Context, *connect.Request[QueryReq]) (*connect.ServerStreamForClient[QueryResp], error)
}

// NewProtoDbSrvClient constructs a client for the protodb.ProtoDbSrv service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProtoDbSrvClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProtoDbSrvClient {
	baseURL = strings.TrimRight(baseURL, "/")
	protoDbSrvMethods := File_protodb_proto.Services().ByName("ProtoDbSrv").Methods()
	return &protoDbSrvClient{
		crud: connect.NewClient[CrudReq, CrudResp](
			httpClient,
			baseURL+ProtoDbSrvCrudProcedure,
			connect.WithSchema(protoDbSrvMethods.ByName("Crud")),
			connect.WithClientOptions(opts...),
		),
		tableSelect: connect.NewClient[TableSelectReq, TableSelectResp](
			httpClient,
			baseURL+ProtoDbSrvTableSelectProcedure,
			connect.WithSchema(protoDbSrvMethods.ByName("TableSelect")),
			connect.WithClientOptions(opts...),
		),
		query: connect.NewClient[QueryReq, QueryResp](
			httpClient,
			baseURL+ProtoDbSrvQueryProcedure,
			connect.WithSchema(protoDbSrvMethods.ByName("Query")),
			connect.WithClientOptions(opts...),
		),
	}
}

// protoDbSrvClient implements ProtoDbSrvClient.
type protoDbSrvClient struct {
	crud        *connect.Client[CrudReq, CrudResp]
	tableSelect *connect.Client[TableSelectReq, TableSelectResp]
	query       *connect.Client[QueryReq, QueryResp]
}

// Crud calls protodb.ProtoDbSrv.Crud.
func (c *protoDbSrvClient) Crud(ctx context.Context, req *connect.Request[CrudReq]) (*connect.Response[CrudResp], error) {
	return c.crud.CallUnary(ctx, req)
}

// TableSelect calls protodb.ProtoDbSrv.TableSelect.
func (c *protoDbSrvClient) TableSelect(ctx context.Context, req *connect.Request[TableSelectReq]) (*connect.ServerStreamForClient[TableSelectResp], error) {
	return c.tableSelect.CallServerStream(ctx, req)
}

// Query calls protodb.ProtoDbSrv.Query.
func (c *protoDbSrvClient) Query(ctx context.Context, req *connect.Request[QueryReq]) (*connect.ServerStreamForClient[QueryResp], error) {
	return c.query.CallServerStream(ctx, req)
}

// ProtoDbSrvHandler is an implementation of the protodb.ProtoDbSrv service.
type ProtoDbSrvHandler interface {
	// crud
	Crud(context.Context, *connect.Request[CrudReq]) (*connect.Response[CrudResp], error)
	// table select
	TableSelect(context.Context, *connect.Request[TableSelectReq], *connect.ServerStream[TableSelectResp]) error
	// query
	Query(context.Context, *connect.Request[QueryReq], *connect.ServerStream[QueryResp]) error
}

// NewProtoDbSrvHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProtoDbSrvHandler(svc ProtoDbSrvHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	protoDbSrvMethods := File_protodb_proto.Services().ByName("ProtoDbSrv").Methods()
	protoDbSrvCrudHandler := connect.NewUnaryHandler(
		ProtoDbSrvCrudProcedure,
		svc.Crud,
		connect.WithSchema(protoDbSrvMethods.ByName("Crud")),
		connect.WithHandlerOptions(opts...),
	)
	protoDbSrvTableSelectHandler := connect.NewServerStreamHandler(
		ProtoDbSrvTableSelectProcedure,
		svc.TableSelect,
		connect.WithSchema(protoDbSrvMethods.ByName("TableSelect")),
		connect.WithHandlerOptions(opts...),
	)
	protoDbSrvQueryHandler := connect.NewServerStreamHandler(
		ProtoDbSrvQueryProcedure,
		svc.Query,
		connect.WithSchema(protoDbSrvMethods.ByName("Query")),
		connect.WithHandlerOptions(opts...),
	)
	return "/protodb.ProtoDbSrv/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProtoDbSrvCrudProcedure:
			protoDbSrvCrudHandler.ServeHTTP(w, r)
		case ProtoDbSrvTableSelectProcedure:
			protoDbSrvTableSelectHandler.ServeHTTP(w, r)
		case ProtoDbSrvQueryProcedure:
			protoDbSrvQueryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProtoDbSrvHandler returns CodeUnimplemented from all methods.
type UnimplementedProtoDbSrvHandler struct{}

func (UnimplementedProtoDbSrvHandler) Crud(context.Context, *connect.Request[CrudReq]) (*connect.Response[CrudResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("protodb.ProtoDbSrv.Crud is not implemented"))
}

func (UnimplementedProtoDbSrvHandler) TableSelect(context.Context, *connect.Request[TableSelectReq], *connect.ServerStream[TableSelectResp]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("protodb.ProtoDbSrv.TableSelect is not implemented"))
}

func (UnimplementedProtoDbSrvHandler) Query(context.Context, *connect.Request[QueryReq], *connect.ServerStream[QueryResp]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("protodb.ProtoDbSrv.Query is not implemented"))
}
