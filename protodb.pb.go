// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.2
// source: protodb.proto

package protodb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FieldDbType int32

const (
	// auto match db type if DbTypeStr not set
	// pb type -> db type
	// bool -> bool
	// string -> text
	// int32 -> int
	// int64,uint32 -> bigint
	// float -> float
	// double -> double precision
	// bytes -> bytea
	FieldDbType_AutoMatch FieldDbType = 0
	FieldDbType_BOOL      FieldDbType = 1
	FieldDbType_INT32     FieldDbType = 2
	FieldDbType_INT64     FieldDbType = 3
	FieldDbType_FLOAT     FieldDbType = 4
	FieldDbType_DOUBLE    FieldDbType = 5
	FieldDbType_TEXT      FieldDbType = 6
	FieldDbType_JSONB     FieldDbType = 7
	FieldDbType_UUID      FieldDbType = 8
	FieldDbType_TIMESTAMP FieldDbType = 9
	FieldDbType_DATE      FieldDbType = 10
	FieldDbType_BYTEA     FieldDbType = 11
	// ipv4 or ipv6 address
	FieldDbType_INET   FieldDbType = 12
	FieldDbType_UINT32 FieldDbType = 13
)

// Enum value maps for FieldDbType.
var (
	FieldDbType_name = map[int32]string{
		0:  "AutoMatch",
		1:  "BOOL",
		2:  "INT32",
		3:  "INT64",
		4:  "FLOAT",
		5:  "DOUBLE",
		6:  "TEXT",
		7:  "JSONB",
		8:  "UUID",
		9:  "TIMESTAMP",
		10: "DATE",
		11: "BYTEA",
		12: "INET",
		13: "UINT32",
	}
	FieldDbType_value = map[string]int32{
		"AutoMatch": 0,
		"BOOL":      1,
		"INT32":     2,
		"INT64":     3,
		"FLOAT":     4,
		"DOUBLE":    5,
		"TEXT":      6,
		"JSONB":     7,
		"UUID":      8,
		"TIMESTAMP": 9,
		"DATE":      10,
		"BYTEA":     11,
		"INET":      12,
		"UINT32":    13,
	}
)

func (x FieldDbType) Enum() *FieldDbType {
	p := new(FieldDbType)
	*p = x
	return p
}

func (x FieldDbType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldDbType) Descriptor() protoreflect.EnumDescriptor {
	return file_protodb_proto_enumTypes[0].Descriptor()
}

func (FieldDbType) Type() protoreflect.EnumType {
	return &file_protodb_proto_enumTypes[0]
}

func (x FieldDbType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldDbType.Descriptor instead.
func (FieldDbType) EnumDescriptor() ([]byte, []int) {
	return file_protodb_proto_rawDescGZIP(), []int{0}
}

// crud api code
type CrudReqCode int32

const (
	CrudReqCode_INSERT        CrudReqCode = 0
	CrudReqCode_UPDATE        CrudReqCode = 1
	CrudReqCode_PARTIALUPDATE CrudReqCode = 2
	CrudReqCode_DELETE        CrudReqCode = 3
	CrudReqCode_SELECTONE     CrudReqCode = 4
)

// Enum value maps for CrudReqCode.
var (
	CrudReqCode_name = map[int32]string{
		0: "INSERT",
		1: "UPDATE",
		2: "PARTIALUPDATE",
		3: "DELETE",
		4: "SELECTONE",
	}
	CrudReqCode_value = map[string]int32{
		"INSERT":        0,
		"UPDATE":        1,
		"PARTIALUPDATE": 2,
		"DELETE":        3,
		"SELECTONE":     4,
	}
)

func (x CrudReqCode) Enum() *CrudReqCode {
	p := new(CrudReqCode)
	*p = x
	return p
}

func (x CrudReqCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrudReqCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protodb_proto_enumTypes[1].Descriptor()
}

func (CrudReqCode) Type() protoreflect.EnumType {
	return &file_protodb_proto_enumTypes[1]
}

func (x CrudReqCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrudReqCode.Descriptor instead.
func (CrudReqCode) EnumDescriptor() ([]byte, []int) {
	return file_protodb_proto_rawDescGZIP(), []int{1}
}

// crud result type for return
type CrudResultType int32

const (
	// only info dml result(affected rows)
	CrudResultType_DMLResult CrudResultType = 0
	// return new row as msg, selectone use this too
	CrudResultType_NewMsg CrudResultType = 1
	// return old row as msg and new row as msg
	CrudResultType_OldMsgAndNewMsg CrudResultType = 2
)

// Enum value maps for CrudResultType.
var (
	CrudResultType_name = map[int32]string{
		0: "DMLResult",
		1: "NewMsg",
		2: "OldMsgAndNewMsg",
	}
	CrudResultType_value = map[string]int32{
		"DMLResult":       0,
		"NewMsg":          1,
		"OldMsgAndNewMsg": 2,
	}
)

func (x CrudResultType) Enum() *CrudResultType {
	p := new(CrudResultType)
	*p = x
	return p
}

func (x CrudResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrudResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_protodb_proto_enumTypes[2].Descriptor()
}

func (CrudResultType) Type() protoreflect.EnumType {
	return &file_protodb_proto_enumTypes[2]
}

func (x CrudResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrudResultType.Descriptor instead.
func (CrudResultType) EnumDescriptor() ([]byte, []int) {
	return file_protodb_proto_rawDescGZIP(), []int{2}
}

type PDBFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name style(msg & field)
	// empty='go': default, go name style, better performance in crud operation in
	// go (like: UserName) 'snake': snake name style (like: user_name)
	NameStyle string `protobuf:"bytes,1,opt,name=NameStyle,proto3" json:"NameStyle,omitempty"`
	// comment for file
	Comment []string `protobuf:"bytes,2,rep,name=Comment,proto3" json:"Comment,omitempty"`
}

func (x *PDBFile) Reset() {
	*x = PDBFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protodb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDBFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDBFile) ProtoMessage() {}

func (x *PDBFile) ProtoReflect() protoreflect.Message {
	mi := &file_protodb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDBFile.ProtoReflect.Descriptor instead.
func (*PDBFile) Descriptor() ([]byte, []int) {
	return file_protodb_proto_rawDescGZIP(), []int{0}
}

func (x *PDBFile) GetNameStyle() string {
	if x != nil {
		return x.NameStyle
	}
	return ""
}

func (x *PDBFile) GetComment() []string {
	if x != nil {
		return x.Comment
	}
	return nil
}

type PDBMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// comment for table
	Comment []string `protobuf:"bytes,1,rep,name=Comment,proto3" json:"Comment,omitempty"`
	// sql prepends before create table
	SQLPrepend []string `protobuf:"bytes,2,rep,name=SQLPrepend,proto3" json:"SQLPrepend,omitempty"`
	// sql appends before )
	SQLAppend []string `protobuf:"bytes,3,rep,name=SQLAppend,proto3" json:"SQLAppend,omitempty"`
	// sql appends after ) before ;
	SQLAppendsAfter []string `protobuf:"bytes,4,rep,name=SQLAppendsAfter,proto3" json:"SQLAppendsAfter,omitempty"`
	// sql appends after ;
	SQLAppendsEnd []string `protobuf:"bytes,5,rep,name=SQLAppendsEnd,proto3" json:"SQLAppendsEnd,omitempty"`
	// generate proto msg { {msg}}List in  xxx.list.proto
	// 0: auto if msg name start with db then generate { {msg}}List
	// 1: always generate { {msg}}List
	// 4: never generate { {msg}}List
	MsgList int32 `protobuf:"varint,6,opt,name=MsgList,proto3" json:"MsgList,omitempty"`
	// do not generate db table for this message
	NotDB bool `protobuf:"varint,7,opt,name=NotDB,proto3" json:"NotDB,omitempty"`
	// sql for migrate table
	SQLMigrate []string `protobuf:"bytes,8,rep,name=SQLMigrate,proto3" json:"SQLMigrate,omitempty"`
}

func (x *PDBMsg) Reset() {
	*x = PDBMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protodb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDBMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDBMsg) ProtoMessage() {}

func (x *PDBMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protodb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDBMsg.ProtoReflect.Descriptor instead.
func (*PDBMsg) Descriptor() ([]byte, []int) {
	return file_protodb_proto_rawDescGZIP(), []int{1}
}

func (x *PDBMsg) GetComment() []string {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *PDBMsg) GetSQLPrepend() []string {
	if x != nil {
		return x.SQLPrepend
	}
	return nil
}

func (x *PDBMsg) GetSQLAppend() []string {
	if x != nil {
		return x.SQLAppend
	}
	return nil
}

func (x *PDBMsg) GetSQLAppendsAfter() []string {
	if x != nil {
		return x.SQLAppendsAfter
	}
	return nil
}

func (x *PDBMsg) GetSQLAppendsEnd() []string {
	if x != nil {
		return x.SQLAppendsEnd
	}
	return nil
}

func (x *PDBMsg) GetMsgList() int32 {
	if x != nil {
		return x.MsgList
	}
	return 0
}

func (x *PDBMsg) GetNotDB() bool {
	if x != nil {
		return x.NotDB
	}
	return false
}

func (x *PDBMsg) GetSQLMigrate() []string {
	if x != nil {
		return x.SQLMigrate
	}
	return nil
}

type PDBField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// do not generate db field in create table
	// when in update, do not update this field
	NotDB bool `protobuf:"varint,1,opt,name=NotDB,proto3" json:"NotDB,omitempty"`
	// is primary key
	Primary bool `protobuf:"varint,2,opt,name=Primary,proto3" json:"Primary,omitempty"`
	// is unique key, if the unique include multiple columns, specify the UniqueName
	Unique bool `protobuf:"varint,3,opt,name=Unique,proto3" json:"Unique,omitempty"`
	// is not null
	NotNull bool `protobuf:"varint,4,opt,name=NotNull,proto3" json:"NotNull,omitempty"`
	// reference to other table, sql like:  REFERENCES other_table(other_field)
	Reference string `protobuf:"bytes,5,opt,name=Reference,proto3" json:"Reference,omitempty"`
	// default value
	DefaultValue string `protobuf:"bytes,6,opt,name=DefaultValue,proto3" json:"DefaultValue,omitempty"`
	// append sql before ,
	SQLAppend []string `protobuf:"bytes,7,rep,name=SQLAppend,proto3" json:"SQLAppend,omitempty"`
	// append sql after ,
	SQLAppendsEnd []string `protobuf:"bytes,8,rep,name=SQLAppendsEnd,proto3" json:"SQLAppendsEnd,omitempty"`
	// db no update
	// when in update, do not update this field, for example, create time
	NoUpdate bool `protobuf:"varint,9,opt,name=NoUpdate,proto3" json:"NoUpdate,omitempty"`
	// serial type 0:not serial type 2:smallint(serial2) 4:integer(serial4) 8:bigint(serial8)
	// strong advice not use serial type,it's hard in distributed system
	SerialType int32 `protobuf:"varint,10,opt,name=SerialType,proto3" json:"SerialType,omitempty"`
	// db type
	DbType FieldDbType `protobuf:"varint,11,opt,name=DbType,proto3,enum=protodb.FieldDbType" json:"DbType,omitempty"`
	// use custom db type when DbType is not good fit
	DbTypeStr string `protobuf:"bytes,12,opt,name=DbTypeStr,proto3" json:"DbTypeStr,omitempty"`
	// zero value treat as null for insert,update, especially for reference field
	ZeroAsNull bool `protobuf:"varint,13,opt,name=ZeroAsNull,proto3" json:"ZeroAsNull,omitempty"`
	// db no insert
	// when in insert, do not insert this field, for example, database has default value
	NoInsert bool `protobuf:"varint,14,opt,name=NoInsert,proto3" json:"NoInsert,omitempty"`
	// comment for field
	Comment []string `protobuf:"bytes,15,rep,name=Comment,proto3" json:"Comment,omitempty"`
	// unique group name
	// when a unique constrain include multiple column, specify the a group name for it
	UniqueName string `protobuf:"bytes,16,opt,name=UniqueName,proto3" json:"UniqueName,omitempty"`
}

func (x *PDBField) Reset() {
	*x = PDBField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protodb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDBField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDBField) ProtoMessage() {}

func (x *PDBField) ProtoReflect() protoreflect.Message {
	mi := &file_protodb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDBField.ProtoReflect.Descriptor instead.
func (*PDBField) Descriptor() ([]byte, []int) {
	return file_protodb_proto_rawDescGZIP(), []int{2}
}

func (x *PDBField) GetNotDB() bool {
	if x != nil {
		return x.NotDB
	}
	return false
}

func (x *PDBField) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *PDBField) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *PDBField) GetNotNull() bool {
	if x != nil {
		return x.NotNull
	}
	return false
}

func (x *PDBField) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *PDBField) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *PDBField) GetSQLAppend() []string {
	if x != nil {
		return x.SQLAppend
	}
	return nil
}

func (x *PDBField) GetSQLAppendsEnd() []string {
	if x != nil {
		return x.SQLAppendsEnd
	}
	return nil
}

func (x *PDBField) GetNoUpdate() bool {
	if x != nil {
		return x.NoUpdate
	}
	return false
}

func (x *PDBField) GetSerialType() int32 {
	if x != nil {
		return x.SerialType
	}
	return 0
}

func (x *PDBField) GetDbType() FieldDbType {
	if x != nil {
		return x.DbType
	}
	return FieldDbType_AutoMatch
}

func (x *PDBField) GetDbTypeStr() string {
	if x != nil {
		return x.DbTypeStr
	}
	return ""
}

func (x *PDBField) GetZeroAsNull() bool {
	if x != nil {
		return x.ZeroAsNull
	}
	return false
}

func (x *PDBField) GetNoInsert() bool {
	if x != nil {
		return x.NoInsert
	}
	return false
}

func (x *PDBField) GetComment() []string {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *PDBField) GetUniqueName() string {
	if x != nil {
		return x.UniqueName
	}
	return ""
}

// crud request
type CrudReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                CrudReqCode    `protobuf:"varint,1,opt,name=Code,proto3,enum=protodb.CrudReqCode" json:"Code,omitempty"`
	ResultType          CrudResultType `protobuf:"varint,2,opt,name=ResultType,proto3,enum=protodb.CrudResultType" json:"ResultType,omitempty"`
	SchemeName          string         `protobuf:"bytes,3,opt,name=SchemeName,proto3" json:"SchemeName,omitempty"`
	TableName           string         `protobuf:"bytes,4,opt,name=TableName,proto3" json:"TableName,omitempty"`
	MsgBytes            []byte         `protobuf:"bytes,5,opt,name=MsgBytes,proto3" json:"MsgBytes,omitempty"`
	PartialUpdateFields []string       `protobuf:"bytes,6,rep,name=PartialUpdateFields,proto3" json:"PartialUpdateFields,omitempty"`
	SelectResultFields  []string       `protobuf:"bytes,7,rep,name=SelectResultFields,proto3" json:"SelectResultFields,omitempty"`
}

func (x *CrudReq) Reset() {
	*x = CrudReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protodb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrudReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrudReq) ProtoMessage() {}

func (x *CrudReq) ProtoReflect() protoreflect.Message {
	mi := &file_protodb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrudReq.ProtoReflect.Descriptor instead.
func (*CrudReq) Descriptor() ([]byte, []int) {
	return file_protodb_proto_rawDescGZIP(), []int{3}
}

func (x *CrudReq) GetCode() CrudReqCode {
	if x != nil {
		return x.Code
	}
	return CrudReqCode_INSERT
}

func (x *CrudReq) GetResultType() CrudResultType {
	if x != nil {
		return x.ResultType
	}
	return CrudResultType_DMLResult
}

func (x *CrudReq) GetSchemeName() string {
	if x != nil {
		return x.SchemeName
	}
	return ""
}

func (x *CrudReq) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *CrudReq) GetMsgBytes() []byte {
	if x != nil {
		return x.MsgBytes
	}
	return nil
}

func (x *CrudReq) GetPartialUpdateFields() []string {
	if x != nil {
		return x.PartialUpdateFields
	}
	return nil
}

func (x *CrudReq) GetSelectResultFields() []string {
	if x != nil {
		return x.SelectResultFields
	}
	return nil
}

// Crud response
type CrudResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RowsAffected in dml operation
	RowsAffected int64 `protobuf:"varint,1,opt,name=RowsAffected,proto3" json:"RowsAffected,omitempty"`
	// err info when error happened
	ErrInfo string `protobuf:"bytes,2,opt,name=ErrInfo,proto3" json:"ErrInfo,omitempty"`
	// old row as msg
	OldMsgBytes []byte `protobuf:"bytes,3,opt,name=OldMsgBytes,proto3" json:"OldMsgBytes,omitempty"`
	// new row as msg
	NewMsgBytes []byte `protobuf:"bytes,4,opt,name=NewMsgBytes,proto3" json:"NewMsgBytes,omitempty"`
}

func (x *CrudResp) Reset() {
	*x = CrudResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protodb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrudResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrudResp) ProtoMessage() {}

func (x *CrudResp) ProtoReflect() protoreflect.Message {
	mi := &file_protodb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrudResp.ProtoReflect.Descriptor instead.
func (*CrudResp) Descriptor() ([]byte, []int) {
	return file_protodb_proto_rawDescGZIP(), []int{4}
}

func (x *CrudResp) GetRowsAffected() int64 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

func (x *CrudResp) GetErrInfo() string {
	if x != nil {
		return x.ErrInfo
	}
	return ""
}

func (x *CrudResp) GetOldMsgBytes() []byte {
	if x != nil {
		return x.OldMsgBytes
	}
	return nil
}

func (x *CrudResp) GetNewMsgBytes() []byte {
	if x != nil {
		return x.NewMsgBytes
	}
	return nil
}

type TableSelectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbSchema  string `protobuf:"bytes,1,opt,name=DbSchema,proto3" json:"DbSchema,omitempty"`
	TableName string `protobuf:"bytes,2,opt,name=TableName,proto3" json:"TableName,omitempty"`
	// result column names
	ResultColumnNames []string `protobuf:"bytes,3,rep,name=ResultColumnNames,proto3" json:"ResultColumnNames,omitempty"`
	// Fieldname == Value
	Where map[string]string `protobuf:"bytes,4,rep,name=Where,proto3" json:"Where,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// limit 0:no limit
	Limit  int32 `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset int64 `protobuf:"varint,6,opt,name=Offset,proto3" json:"Offset,omitempty"`
	// prefer batch size
	PreferBatchSize int32 `protobuf:"varint,7,opt,name=PreferBatchSize,proto3" json:"PreferBatchSize,omitempty"`
}

func (x *TableSelectReq) Reset() {
	*x = TableSelectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protodb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSelectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSelectReq) ProtoMessage() {}

func (x *TableSelectReq) ProtoReflect() protoreflect.Message {
	mi := &file_protodb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSelectReq.ProtoReflect.Descriptor instead.
func (*TableSelectReq) Descriptor() ([]byte, []int) {
	return file_protodb_proto_rawDescGZIP(), []int{5}
}

func (x *TableSelectReq) GetDbSchema() string {
	if x != nil {
		return x.DbSchema
	}
	return ""
}

func (x *TableSelectReq) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TableSelectReq) GetResultColumnNames() []string {
	if x != nil {
		return x.ResultColumnNames
	}
	return nil
}

func (x *TableSelectReq) GetWhere() map[string]string {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *TableSelectReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TableSelectReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TableSelectReq) GetPreferBatchSize() int32 {
	if x != nil {
		return x.PreferBatchSize
	}
	return 0
}

type TableSelectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// response batch no
	ResponseNo int64 `protobuf:"varint,1,opt,name=ResponseNo,proto3" json:"ResponseNo,omitempty"`
	// if it is last response
	ResponseEnd bool `protobuf:"varint,2,opt,name=ResponseEnd,proto3" json:"ResponseEnd,omitempty"`
	// err info when error happened
	ErrInfo  string   `protobuf:"bytes,3,opt,name=ErrInfo,proto3" json:"ErrInfo,omitempty"`
	MsgBytes [][]byte `protobuf:"bytes,4,rep,name=MsgBytes,proto3" json:"MsgBytes,omitempty"`
}

func (x *TableSelectResp) Reset() {
	*x = TableSelectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protodb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSelectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSelectResp) ProtoMessage() {}

func (x *TableSelectResp) ProtoReflect() protoreflect.Message {
	mi := &file_protodb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSelectResp.ProtoReflect.Descriptor instead.
func (*TableSelectResp) Descriptor() ([]byte, []int) {
	return file_protodb_proto_rawDescGZIP(), []int{6}
}

func (x *TableSelectResp) GetResponseNo() int64 {
	if x != nil {
		return x.ResponseNo
	}
	return 0
}

func (x *TableSelectResp) GetResponseEnd() bool {
	if x != nil {
		return x.ResponseEnd
	}
	return false
}

func (x *TableSelectResp) GetErrInfo() string {
	if x != nil {
		return x.ErrInfo
	}
	return ""
}

func (x *TableSelectResp) GetMsgBytes() [][]byte {
	if x != nil {
		return x.MsgBytes
	}
	return nil
}

type QueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryReq) Reset() {
	*x = QueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protodb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReq) ProtoMessage() {}

func (x *QueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_protodb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReq.ProtoReflect.Descriptor instead.
func (*QueryReq) Descriptor() ([]byte, []int) {
	return file_protodb_proto_rawDescGZIP(), []int{7}
}

type QueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryResp) Reset() {
	*x = QueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protodb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResp) ProtoMessage() {}

func (x *QueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_protodb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResp.ProtoReflect.Descriptor instead.
func (*QueryResp) Descriptor() ([]byte, []int) {
	return file_protodb_proto_rawDescGZIP(), []int{8}
}

var file_protodb_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*PDBFile)(nil),
		Field:         1888,
		Name:          "protodb.pdbf",
		Tag:           "bytes,1888,opt,name=pdbf",
		Filename:      "protodb.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*PDBMsg)(nil),
		Field:         1888,
		Name:          "protodb.pdbm",
		Tag:           "bytes,1888,opt,name=pdbm",
		Filename:      "protodb.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*PDBField)(nil),
		Field:         1888,
		Name:          "protodb.pdb",
		Tag:           "bytes,1888,opt,name=pdb",
		Filename:      "protodb.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// optional protodb.PDBFile pdbf = 1888;
	E_Pdbf = &file_protodb_proto_extTypes[0]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional protodb.PDBMsg pdbm = 1888;
	E_Pdbm = &file_protodb_proto_extTypes[1]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional protodb.PDBField pdb = 1888;
	E_Pdb = &file_protodb_proto_extTypes[2]
)

var File_protodb_proto protoreflect.FileDescriptor

var file_protodb_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x07, 0x50, 0x44,
	0x42, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x80, 0x02,
	0x0a, 0x06, 0x50, 0x44, 0x42, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x51, 0x4c, 0x50, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x51, 0x4c, 0x50, 0x72, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x51, 0x4c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x53, 0x51, 0x4c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x53, 0x51, 0x4c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x51, 0x4c, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x51,
	0x4c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x53, 0x51, 0x4c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f,
	0x74, 0x44, 0x42, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x44, 0x42,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x51, 0x4c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x51, 0x4c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x22, 0xf0, 0x03, 0x0a, 0x08, 0x50, 0x44, 0x42, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x6f, 0x74, 0x44, 0x42, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x4e, 0x6f,
	0x74, 0x44, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x51, 0x4c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x53, 0x51, 0x4c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x53, 0x51, 0x4c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x64,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x51, 0x4c, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4e, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x44, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x44, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x62, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x44, 0x62, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x5a, 0x65, 0x72, 0x6f, 0x41, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x5a, 0x65, 0x72, 0x6f, 0x41, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x4e, 0x6f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x4e, 0x6f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x07, 0x43, 0x72, 0x75, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x28, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x52, 0x65, 0x71, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x8c,
	0x01, 0x0a, 0x08, 0x43, 0x72, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x52,
	0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x52, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x45, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x6c, 0x64,
	0x4d, 0x73, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x4f, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4e,
	0x65, 0x77, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xc4, 0x02,
	0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x44, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x44, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x57, 0x68, 0x65, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64,
	0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x57, 0x68,
	0x65, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x72, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x22, 0x0a, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x22, 0x0b, 0x0a, 0x09,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x2a, 0xac, 0x01, 0x0a, 0x0b, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x75, 0x74,
	0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41,
	0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4a, 0x53, 0x4f,
	0x4e, 0x42, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x08, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x09, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x41,
	0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x45, 0x54, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x0d, 0x2a, 0x53, 0x0a, 0x0b, 0x43, 0x72, 0x75, 0x64,
	0x52, 0x65, 0x71, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53, 0x45, 0x52,
	0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x2a, 0x40, 0x0a,
	0x0e, 0x43, 0x72, 0x75, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x4d, 0x4c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x6c,
	0x64, 0x4d, 0x73, 0x67, 0x41, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x10, 0x02, 0x32,
	0xb5, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x62, 0x53, 0x72, 0x76, 0x12, 0x2d,
	0x0a, 0x04, 0x43, 0x72, 0x75, 0x64, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62,
	0x2e, 0x43, 0x72, 0x75, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x64, 0x62, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x30, 0x01, 0x3a, 0x46, 0x0a, 0x04, 0x70, 0x64, 0x62, 0x66, 0x12,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe0, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62, 0x2e, 0x50,
	0x44, 0x42, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x70, 0x64, 0x62, 0x66, 0x88, 0x01, 0x01, 0x3a,
	0x48, 0x0a, 0x04, 0x70, 0x64, 0x62, 0x6d, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe0, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62, 0x2e, 0x50, 0x44, 0x42, 0x4d, 0x73, 0x67,
	0x52, 0x04, 0x70, 0x64, 0x62, 0x6d, 0x88, 0x01, 0x01, 0x3a, 0x46, 0x0a, 0x03, 0x70, 0x64, 0x62,
	0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xe0, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62,
	0x2e, 0x50, 0x44, 0x42, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x03, 0x70, 0x64, 0x62, 0x88, 0x01,
	0x01, 0x42, 0x1a, 0x5a, 0x18, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x79, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protodb_proto_rawDescOnce sync.Once
	file_protodb_proto_rawDescData = file_protodb_proto_rawDesc
)

func file_protodb_proto_rawDescGZIP() []byte {
	file_protodb_proto_rawDescOnce.Do(func() {
		file_protodb_proto_rawDescData = protoimpl.X.CompressGZIP(file_protodb_proto_rawDescData)
	})
	return file_protodb_proto_rawDescData
}

var file_protodb_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protodb_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_protodb_proto_goTypes = []interface{}{
	(FieldDbType)(0),                    // 0: protodb.FieldDbType
	(CrudReqCode)(0),                    // 1: protodb.CrudReqCode
	(CrudResultType)(0),                 // 2: protodb.CrudResultType
	(*PDBFile)(nil),                     // 3: protodb.PDBFile
	(*PDBMsg)(nil),                      // 4: protodb.PDBMsg
	(*PDBField)(nil),                    // 5: protodb.PDBField
	(*CrudReq)(nil),                     // 6: protodb.CrudReq
	(*CrudResp)(nil),                    // 7: protodb.CrudResp
	(*TableSelectReq)(nil),              // 8: protodb.TableSelectReq
	(*TableSelectResp)(nil),             // 9: protodb.TableSelectResp
	(*QueryReq)(nil),                    // 10: protodb.QueryReq
	(*QueryResp)(nil),                   // 11: protodb.QueryResp
	nil,                                 // 12: protodb.TableSelectReq.WhereEntry
	(*descriptorpb.FileOptions)(nil),    // 13: google.protobuf.FileOptions
	(*descriptorpb.MessageOptions)(nil), // 14: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),   // 15: google.protobuf.FieldOptions
}
var file_protodb_proto_depIdxs = []int32{
	0,  // 0: protodb.PDBField.DbType:type_name -> protodb.FieldDbType
	1,  // 1: protodb.CrudReq.Code:type_name -> protodb.CrudReqCode
	2,  // 2: protodb.CrudReq.ResultType:type_name -> protodb.CrudResultType
	12, // 3: protodb.TableSelectReq.Where:type_name -> protodb.TableSelectReq.WhereEntry
	13, // 4: protodb.pdbf:extendee -> google.protobuf.FileOptions
	14, // 5: protodb.pdbm:extendee -> google.protobuf.MessageOptions
	15, // 6: protodb.pdb:extendee -> google.protobuf.FieldOptions
	3,  // 7: protodb.pdbf:type_name -> protodb.PDBFile
	4,  // 8: protodb.pdbm:type_name -> protodb.PDBMsg
	5,  // 9: protodb.pdb:type_name -> protodb.PDBField
	6,  // 10: protodb.ProtoDbSrv.Crud:input_type -> protodb.CrudReq
	8,  // 11: protodb.ProtoDbSrv.TableSelect:input_type -> protodb.TableSelectReq
	10, // 12: protodb.ProtoDbSrv.Query:input_type -> protodb.QueryReq
	7,  // 13: protodb.ProtoDbSrv.Crud:output_type -> protodb.CrudResp
	9,  // 14: protodb.ProtoDbSrv.TableSelect:output_type -> protodb.TableSelectResp
	11, // 15: protodb.ProtoDbSrv.Query:output_type -> protodb.QueryResp
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	7,  // [7:10] is the sub-list for extension type_name
	4,  // [4:7] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_protodb_proto_init() }
func file_protodb_proto_init() {
	if File_protodb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protodb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDBFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protodb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDBMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protodb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDBField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protodb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrudReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protodb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrudResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protodb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSelectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protodb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSelectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protodb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protodb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protodb_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 3,
			NumServices:   1,
		},
		GoTypes:           file_protodb_proto_goTypes,
		DependencyIndexes: file_protodb_proto_depIdxs,
		EnumInfos:         file_protodb_proto_enumTypes,
		MessageInfos:      file_protodb_proto_msgTypes,
		ExtensionInfos:    file_protodb_proto_extTypes,
	}.Build()
	File_protodb_proto = out.File
	file_protodb_proto_rawDesc = nil
	file_protodb_proto_goTypes = nil
	file_protodb_proto_depIdxs = nil
}
